{
  "api": {
    "name": "Auth0CapacitorPlugin",
    "slug": "auth0capacitorplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "createAuth0Client",
        "signature": "(options: { domain: string; clientId: string; authorizationParams: { redirect_uri: string; }; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ domain: string; clientId: string; authorizationParams: { redirect_uri: string; }; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "createauth0client"
      },
      {
        "name": "login",
        "signature": "(options: { scope: string; audience: string; appState?: string; redirect_uri?: string; }) => Promise<GetTokenSilentlyVerboseResponse>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ scope: string; audience: string; appState?: string | undefined; redirect_uri?: string | undefined; }"
          }
        ],
        "returns": "Promise<GetTokenSilentlyVerboseResponse>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "GetTokenSilentlyVerboseResponse"
        ],
        "slug": "login"
      },
      {
        "name": "logout",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "logout"
      },
      {
        "name": "handleRedirect",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "handleredirect"
      },
      {
        "name": "renew",
        "signature": "() => Promise<GetTokenSilentlyVerboseResponse | undefined>",
        "parameters": [],
        "returns": "Promise<GetTokenSilentlyVerboseResponse | undefined>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "GetTokenSilentlyVerboseResponse"
        ],
        "slug": "renew"
      },
      {
        "name": "getUser",
        "signature": "() => Promise<{ [key: string]: any; }>",
        "parameters": [],
        "returns": "Promise<{ [key: string]: any; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getuser"
      },
      {
        "name": "getTokenSilently",
        "signature": "() => Promise<GetTokenSilentlyVerboseResponse | undefined>",
        "parameters": [],
        "returns": "Promise<GetTokenSilentlyVerboseResponse | undefined>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "GetTokenSilentlyVerboseResponse"
        ],
        "slug": "gettokensilently"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [
    {
      "name": "GetTokenSilentlyVerboseResponse",
      "slug": "gettokensilentlyverboseresponse",
      "docs": "",
      "types": [
        {
          "text": "Omit<TokenEndpointResponse, 'refresh_token'>",
          "complexTypes": [
            "Omit",
            "TokenEndpointResponse"
          ]
        }
      ]
    },
    {
      "name": "Omit",
      "slug": "omit",
      "docs": "Construct a type with the properties of T except for those in type K.",
      "types": [
        {
          "text": "Pick<T, Exclude<keyof T, K>>",
          "complexTypes": [
            "Pick",
            "T",
            "Exclude",
            "K"
          ]
        }
      ]
    },
    {
      "name": "Pick",
      "slug": "pick",
      "docs": "From T, pick a set of properties whose keys are in the union K",
      "types": [
        {
          "text": "{\r\n    [P in K]: T[P];\r\n}",
          "complexTypes": [
            "K",
            "T",
            "P"
          ]
        }
      ]
    },
    {
      "name": "Exclude",
      "slug": "exclude",
      "docs": "Exclude from T those types that are assignable to U",
      "types": [
        {
          "text": "T extends U ? never : T",
          "complexTypes": [
            "T",
            "U"
          ]
        }
      ]
    },
    {
      "name": "TokenEndpointResponse",
      "slug": "tokenendpointresponse",
      "docs": "",
      "types": [
        {
          "text": "{\r\n    id_token: string;\r\n    access_token: string;\r\n    refresh_token?: string;\r\n    expires_in: number;\r\n    scope?: string;\r\n}",
          "complexTypes": []
        }
      ]
    }
  ],
  "pluginConfigs": []
}